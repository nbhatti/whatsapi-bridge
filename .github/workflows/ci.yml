name: 🚀 WhatsAPI Bridge CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      skip_docker:
        description: 'Skip Docker build'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  API_KEY: test-api-key
  REDIS_URL: redis://localhost:6379

jobs:
  # Job 1: Code Quality & Security Checks
  quality:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🧹 Check code formatting
        run: npm run format:check
        
      - name: 📏 Lint code
        run: npm run lint
        
      - name: 🔒 Security audit
        run: npm run security:audit
        
      - name: 🏗️ Build check
        run: npm run build
        
      - name: 📊 Add quality summary
        run: |
          echo "## 🔍 Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Formatting:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linting:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security:** No vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build:** Successful" >> $GITHUB_STEP_SUMMARY

  # Job 2: Test Matrix (Multiple Node.js versions and OS)
  test:
    name: 🧪 Test (Node ${{ matrix.node }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node: ['22', '24']
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - node: '22'
            os: ubuntu-latest
            coverage: true
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🧪 Run all tests
        run: npm test
        
      - name: 📊 Generate coverage
        if: matrix.coverage
        run: npm run test:coverage
        
      - name: 📥 Upload to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: whatsapi-bridge-coverage
          verbose: true

  # Job 3: Docker Build & Security Scan
  docker:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: quality
    if: github.event.inputs.skip_docker != 'true'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker image
        run: |
          docker build -t whatsapi-bridge:${{ github.sha }} .
          docker tag whatsapi-bridge:${{ github.sha }} whatsapi-bridge:latest
          
      - name: 🔍 Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'whatsapi-bridge:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🧪 Test Docker container
        run: |
          docker run -d --name test-container \
            -p 3000:3000 \
            -e NODE_ENV=test \
            -e API_KEY=test-key \
            whatsapi-bridge:latest
          
          # Wait for container to start
          sleep 15
          
          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # Job 4: Performance & Bundle Analysis
  performance:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: 📊 Bundle analysis
        run: |
          BUILD_SIZE=$(du -sh dist/ | cut -f1)
          JS_FILES=$(find dist -name "*.js" | wc -l)
          TOTAL_LINES=$(find dist -name "*.js" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          echo "## ⚡ Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Bundle Size:** $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "📄 **JavaScript Files:** $JS_FILES" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Lines of Code:** $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY

  # Job 5: Dependency Check & License Compliance
  dependencies:
    name: 📦 Dependencies & Licenses
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔍 Check outdated packages
        run: |
          echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
          if npm outdated --json > outdated.json 2>/dev/null; then
            echo "✅ All packages are up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some packages have updates available" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 📄 License compliance
        run: |
          npx license-checker --summary || echo "License checker completed"
          echo "📄 **License Check:** Completed" >> $GITHUB_STEP_SUMMARY

  # Job 6: Release Readiness (Main branch only)
  release:
    name: 🚢 Release Readiness
    runs-on: ubuntu-latest
    needs: [quality, test, docker, performance, dependencies]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🎯 Release preparation
        run: npm run prepare:release
        
      - name: ✅ Release summary
        run: |
          echo "## 🚢 Release Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Quality Checks:** All passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests:** Passing on Node.js 22 & 24" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security:** No vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker:** Build successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Performance:** Analysis complete" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Dependencies:** Compliant" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Project is ready for release!**" >> $GITHUB_STEP_SUMMARY

  # Job 7: Final Summary
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, docker, performance, dependencies, release]
    
    steps:
      - name: 📈 Generate summary
        run: |
          echo "## 🚀 WhatsAPI Bridge CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js Versions:** 22, 24" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "### 📋 Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality & Security | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ (needs.docker.result == 'success' || needs.docker.result == 'skipped') && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ (needs.performance.result == 'success' || needs.performance.result == 'skipped') && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependencies.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Check | ${{ (needs.release.result == 'success' || needs.release.result == 'skipped') && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
