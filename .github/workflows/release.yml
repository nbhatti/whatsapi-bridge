name: 🚢 Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job 1: Pre-release validation
  validate:
    name: ✅ Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🎯 Run full release preparation
        run: npm run prepare:release
        
      - name: 📊 Validation summary
        run: |
          echo "## ✅ Release Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Dependencies:** Installed and verified" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build:** Successful compilation" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests:** All tests passing" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security:** No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linting:** Code style verified" >> $GITHUB_STEP_SUMMARY

  # Job 2: Create release (manual trigger only)
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔢 Bump version
        id: version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Run version bump
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION"
          
      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Generate changelog from git log
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          
          # Save to output (escape newlines)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 🏷️ Create Git tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main --tags

  # Job 3: Build release assets
  build-assets:
    name: 📦 Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.new_version }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: 📦 Create distribution archive
        run: |
          # Create dist archive
          tar -czf whatsapi-bridge-dist.tar.gz dist/
          
          # Create source archive (excluding node_modules)
          tar -czf whatsapi-bridge-source.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.tar.gz' \
            .
            
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            whatsapi-bridge-dist.tar.gz
            whatsapi-bridge-source.tar.gz
          retention-days: 30

  # Job 4: Docker release
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.new_version }}
          
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: GitHub Release
  github-release:
    name: 🎉 GitHub Release
    runs-on: ubuntu-latest
    needs: [create-release, build-assets, docker-release]
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.new_version }}
          
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-assets
          
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.new_version }}
          name: "WhatsAPI Bridge ${{ needs.create-release.outputs.new_version }}"
          body: |
            ## 🚀 WhatsAPI Bridge ${{ needs.create-release.outputs.new_version }}
            
            ### 📋 What's Changed
            ${{ needs.create-release.outputs.changelog }}
            
            ### 📦 Installation
            ```bash
            git clone https://github.com/nbhatti/whatsapi-bridge.git
            cd whatsapi-bridge
            npm install
            ```
            
            ### 🐳 Docker
            ```bash
            docker pull ghcr.io/nbhatti/whatsapi-bridge:${{ needs.create-release.outputs.new_version }}
            ```
            
            ### 🔗 Quick Links
            - 📚 [Documentation](https://github.com/nbhatti/whatsapi-bridge#readme)
            - 🐛 [Report Issues](https://github.com/nbhatti/whatsapi-bridge/issues)
            - 💬 [Discussions](https://github.com/nbhatti/whatsapi-bridge/discussions)
            
            ---
            
            **Full Changelog**: https://github.com/nbhatti/whatsapi-bridge/compare/v1.0.0...${{ needs.create-release.outputs.new_version }}
            
          files: |
            whatsapi-bridge-dist.tar.gz
            whatsapi-bridge-source.tar.gz
          draft: false
          prerelease: ${{ contains(needs.create-release.outputs.new_version, 'alpha') || contains(needs.create-release.outputs.new_version, 'beta') || contains(needs.create-release.outputs.new_version, 'rc') }}
          generate_release_notes: true

  # Job 6: Post-release notifications
  notify:
    name: 📢 Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, github-release]
    if: always() && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📊 Release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.create-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.github-release.result }}" == "success" ]]; then
            echo "✅ **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Docker Images:** Published to GHCR" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Release Assets:** Uploaded" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release:** Failed to create" >> $GITHUB_STEP_SUMMARY
          fi
