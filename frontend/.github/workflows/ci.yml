name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: whatsapi-bridge-web

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: whatsapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma client
        working-directory: ./frontend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test

      - name: Run Prisma migrations
        working-directory: ./frontend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Check Prettier formatting
        working-directory: ./frontend
        run: npm run format:check

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret

      - name: Run API tests
        working-directory: ./frontend
        run: npm run test:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret

  e2e-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: whatsapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma client
        working-directory: ./frontend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test

      - name: Run Prisma migrations
        working-directory: ./frontend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          start: npm start
          wait-on: 'http://localhost:4000'
          wait-on-timeout: 120
          browser: chrome
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_test
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret
          NEXTAUTH_URL: http://localhost:4000
          CYPRESS_TEST_USER_EMAIL: test@example.com
          CYPRESS_TEST_USER_PASSWORD: testPassword123

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_NAME }}:${{ github.sha }}
            type=raw,value=${{ env.IMAGE_NAME }}:latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
